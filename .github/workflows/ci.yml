name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-13, windows-latest]
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 60
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.2"
          channel: "stable"

      - name: Clean and Get Dependencies
        run: |
          flutter clean
          flutter pub get

      - name: Build Runner (Generate Dart Files)
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Format Check (Exclude .mocks files)
        run: dart format --set-exit-if-changed $(git ls-files '*.dart' ':!:*.mocks.dart')

      - name: Analyze Code
        run: flutter analyze

      - name: Run Tests with Coverage
        run: flutter test --coverage

      - name: Upload Coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: run-${{ matrix.platform }}
          parallel: true

      - name: Cache Gradle Wrapper and Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/app/outputs/apk/release/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build APK (Android)
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        env:
          GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
          GH_OAUTH_CLIENT_SECRET: ${{ secrets.GH_OAUTH_CLIENT_SECRET }}
        run: |
          flutter build apk --release \
            --dart-define=GITHUB_OAUTH_CLIENT_ID=$GH_OAUTH_CLIENT_ID \
            --dart-define=GITHUB_OAUTH_CLIENT_SECRET=$GH_OAUTH_CLIENT_SECRET
            
      - name: Upload APK Artifact
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.run_number }}
          path: build/app/outputs/apk/release/app-release.apk
          if-no-files-found: error
          
      - name: Build iOS (MacOS Only)
        if: ${{ matrix.platform == 'macos-13' }}
        run: |
          rm -f ios/Podfile.lock
          flutter build ios --release --no-codesign

  release:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk-${{ github.run_number }}
          path: build/app/outputs/apk/release/  
          
      - name: Get Current Date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v1.0.${{ github.run_number }}"
          name: "Release v1.0.${{ github.run_number }} - ${{ steps.date.outputs.date }}"
          body: |
            Android APK release built from commit ${{ github.sha }}.
            
            Build number: ${{ github.run_number }}
            Build date: ${{ steps.date.outputs.date }}
            
            Download and install the APK file below.
          files: build/app/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
          generate_release_notes: true

  finish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Finalize Coveralls Reporting
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true